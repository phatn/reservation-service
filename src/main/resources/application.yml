spring:
  kafka:
    consumer:
      value-deserializer: "org.springframework.kafka.support.serializer.JsonDeserializer"
      properties:
        "[spring.json.value.default.type]": "edu.miu.sa.reservation.entity.Reservation"
        "[spring.json.trusted.packages]": "edu.miu.sa.reservation"
    producer:
      value-serializer: "org.springframework.kafka.support.serializer.JsonSerializer"
      properties:
        "[spring.json.add.type.headers]": false

---
spring:
  config:
    activate:
      on-profile: dev
  kafka:
    bootstrap-servers: "localhost:9092"

  main:
    allow-bean-definition-overriding: true

  data:
    cassandra:
      contact-points: "localhost"
      port: 9042
      keyspace-name: reservation_ks
      schema-action: create_if_not_exists
      local-datacenter: datacenter1
      request:
        timeout: 10

kafka:
  topic:
    payment: "PaymentRequestEvent"
    property: "ReservationDoneEvent"
    notification: "GetNotificationEvent"

notification:
  message:
    separator: "<br/>"

jwt:
  secret: "top_secret"
---
spring:
  config:
    activate:
      on-profile: prod
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVER}

  main:
    allow-bean-definition-overriding: ${SPRING_ALLOW_BEAN_DEFINITION_OVERRIDING}
  data:
    cassandra:
      contact-points: ${DB_CONTACT_POINTS}
      port: ${DB_PORT}
      keyspace-name: ${DB_RESERVATION_KEYSPACE}
      schema-action: ${DB_SCHEME_ACTION}
      local-datacenter: ${DB_DATACENTER}
      request:
        timeout: ${DB_REQUEST_TIMEOUT}
kafka:
  topic:
    payment: ${PAYMENT_REQUEST_TOPIC}
    property: ${RESERVATION_DONE_TOPIC}
    notification: ${RESERVATION_NOTIFICATION_TOPIC}

notification:
  message:
    separator: ${NOTIFICATION.MESSAGE.SEPARATOR}

jwt:
  secret: ${JWT_SECRET}